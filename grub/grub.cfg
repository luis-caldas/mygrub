########
# Init #
########

# load grub stored variables if present
if [ -s $prefix/grubenv ]; then
	load_env
fi

# time variables
set timeout=-1

# if supported timeout styles make it hidden
if [ x$feature_timeout_style = xy ]; then
	set timeout_style=hidden
fi

#################
# Configuration #
#################

# boot partition
set hd_main_uuid=8DD8-BFF6

# isos partition
# ( containing all the loopback bootable isos )
set isos_uuid=7d6fcd7c-71ed-478b-bd76-40f854ac1f7f
set isos_linux_full_device=/dev/disk/by-uuid/$isos_uuid

# font path
set font="/boot/grub/fonts/unicode.pf2"

# preferred colors
set color_normal=white/black
set menu_color_normal=white/black
set color_highlight=black/white
set menu_color_highlight=black/white

# iso paths
set my_iso=/isos/nixos-21.05.1076.bad3ccd099e-x86_64-linux.iso
set kali_iso=/isos/kali-linux-2019.4-amd64.iso
set tails_iso=/isos/tails-amd64-4.19.iso
set pmagic_iso=/isos/pmagic_2019_05_30.iso
set arch_iso=/isos/archlinux-2019.12.01-x86_64.iso
set manjaro_iso=/isos/manjaro-kde-18.1.4-191210-linux54.iso
set nix_iso=/isos/nixos-minimal-20.03.1619.ab3adfe1c76-x86_64-linux.iso
set ubuntu_iso=/isos/ubuntu-20.04-desktop-amd64.iso
set freedos_iso=/isos/FD13LIVE.ISO


# background image
set background_image_path=/boot/images/main.png

#############
# Functions #
#############

# load all video modules
function load_video {
	if [ x$feature_all_video_module = xy ]; then
		insmod all_video
	else
		insmod efi_gop
		insmod efi_uga
		insmod ieee1275_fb
		insmod vbe
		insmod vga
		insmod video_bochs
		insmod video_cirrus
	fi
}

# message to be displayed when a entry is selected
function outro_system {
	echo 'Please wait while your system is being booted'
	echo 'It will take some time for it to load from the usb drive'
	echo '...'
}

function print_about {

	echo "              https://github.com/luis-caldas"

}

#################
# Main HDD Init #
###########################
# Must go before any file #
# accesing functions      #
###########################

# load modules for this boot partition
insmod part_msdos
insmod exfat
insmod fat

# search the main boot partition
search --no-floppy --fs-uuid --set=root $hd_main_uuid

##########
# Visual #
##########

# if the font loads initialize the graphical mode
if loadfont $font; then

	# set the resolution to the best one available
	set gfxmode=auto

	# load video modules
	load_video

	# load the graphical interface and png image support
	insmod gfxterm
	insmod png

	# set local
	set locale_dir=$prefix/locale
	set lang=en_IE

	# load the language translation module
	insmod gettext
fi

# make ony the graphical terminal active
terminal_output gfxterm

# Background image settings
background_image $background_image_path

# set the boot graphical payload
function gfxmode {
	# should be the first argument
	set gfxpayload="${1}"
}

############
# 2nd Init #
############

# load the modules needed for decompression and loopbacking isos
insmod gzio
if [ x$grub_platform = xxen ]; then
	insmod xzio;
	insmod lzopio;
fi
insmod loopback

# load all remaining needed hdd modules
insmod ext2
insmod ntfs
insmod iso9660

###########
# Entries #
###########

menuentry 'Nix' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $my_iso

	# print outro
	outro_system

	# boot
	linux (loop)/boot/bzImage findiso=$my_iso init=/nix/store/lc5fqf8pd3nsfx4adcvdkl2pci9hzy1r-nixos-system-live-21.05.1076.bad3ccd099e/init  root=LABEL=nixos-minimal-21.05-x86_64 boot.shell_on_fail zfs_force=1 loglevel=0 
	initrd (loop)/boot/initrd

}
menuentry 'Nix Text' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $my_iso

	# print outro
	outro_system

	# boot
	linux (loop)/boot/bzImage findiso=$my_iso init=/nix/store/lc5fqf8pd3nsfx4adcvdkl2pci9hzy1r-nixos-system-live-21.05.1076.bad3ccd099e/init  root=LABEL=nixos-minimal-21.05-x86_64 boot.shell_on_fail zfs_force=1 loglevel=0 vga=normal nomodeset 
	initrd (loop)/boot/initrd

}

menuentry ' ' {
	true
}

menuentry 'Nix Legacy' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $nix_iso

	# print outro
	outro_system

	# boot
	linux (loop)/boot/bzImage findiso=$nix_iso init=/nix/store/b5g04jp989rjw39x06sykw74pakdiy4a-nixos-system-nixos-20.03.1619.ab3adfe1c76/init root=LABEL=nixos-minimal-20.03-x86_64 boot.shell_on_fail loglevel=4
	initrd (loop)/boot/initrd

}

menuentry ' ' {
	true
}

menuentry 'Arch' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $arch_iso

	# print outro
	outro_system

	# boot
	linux (loop)/arch/boot/x86_64/vmlinuz img_dev=$isos_linux_full_device img_loop=$arch_iso earlymodules=loop
	initrd (loop)/arch/boot/intel_ucode.img (loop)/arch/boot/amd_ucode.img (loop)/arch/boot/x86_64/archiso.img
}

menuentry ' ' {
	true
}

menuentry 'Tails' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $tails_iso

	# print outro
	outro_system

	# boot
	linux (loop)/live/vmlinuz findiso=$tails_iso initrd=/live/initrd.img boot=live config live-media=removable nopersistence noprompt timezone=Etc/UTC splash noautologin module=Tails slab_nomerge slub_debug=FZP mce=0 vsyscall=none page_poison=1 init_on_free=1 mds=full,nosmt quiet
	initrd (loop)/live/initrd.img

}
menuentry 'Kali' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $kali_iso

	# print outro
	outro_system

	# boot
	linux (loop)/live/vmlinuz-5.3.0-kali2-amd64 boot=live findiso=$kali_iso components quiet splash username=root hostname=kali noeject
	initrd (loop)/live/initrd.img-5.3.0-kali2-amd64

}
menuentry 'Manjaro' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $manjaro_iso

	# print outro
	outro_system

	# boot
	linux (loop)/boot/vmlinuz-x86_64 img_dev=$isos_linux_full_device img_loop=$arch_iso earlymodules=loop
	initrd (loop)/boot/intel_ucode.img (loop)/boot/amd_ucode.img (loop)/boot/initramfs-x86_64.img
}
menuentry 'Ubuntu' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $ubuntu_iso

	# print outro
	outro_system

	# boot
	linux (loop)/casper/vmlinuz iso-scan/filename=$ubuntu_iso file=(loop)/cdrom/preseed/ubuntu.seed maybe-ubiquity quiet splash
	initrd (loop)/casper/initrd

}

menuentry ' ' {
	true
}

menuentry 'Parted Magic' {

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# create loopback device with iso
	loopback loop $pmagic_iso

	# print outro
	outro_system

	# boot
	linux (loop)/pmagic/bzImage64 boot=live eject=no iso_filename=$pmagic_iso edd=on
	initrd (loop)/pmagic/initrd.img (loop)/pmagic/fu.img (loop)/pmagic/m64.img

}

menuentry ' ' {
	true
}

menuentry 'Memtest' {

	# load the boot partition
	search --no-floppy --fs-uuid --set=root $hd_main_uuid

	# print outro
	outro_system

	# load elf file to boot
	knetbsd	/boot/memtest/memtest86+.elf

}
menuentry 'FreeDOS' {

	# print outro
	outro_system

	# load syslinux implememtation of memdisk
	linux16 /boot/blobs/memdisk iso

	# set the root destination from the isos uuid
	search --no-floppy --fs-uuid --set=root $isos_uuid

	# boot
	initrd16 $freedos_iso

}

menuentry ' ' {
	true
}
menuentry '------------------------------' {
	true
}
menuentry ' ' {
	true
}

submenu 'Advanced' {

	menuentry 'Memtest (serial)' {
		# load the boot partition
		search --no-floppy --fs-uuid --set=root $hd_main_uuid

		# print outro
		outro_system

		# load elf file to boot
		linux16	/boot/memtest/memtest86+.bin console=ttyS0,115200n8
	}

	menuentry 'Parted Magic (32 bits)' {

		# set the root destination from the isos uuid
		search --no-floppy --fs-uuid --set=root $isos_uuid

		# create loopback device with iso
		loopback loop $pmagic_iso

		# print outro
		outro_system

		# boot
		linux (loop)/pmagic/bzImage boot=live eject=no iso_filename=$pmagic_iso edd=on
		initrd (loop)/pmagic/initrd.img (loop)/pmagic/fu.img (loop)/pmagic/m64.img

	}

}

menuentry ' ' {
	true
}

# system commands
submenu 'System' {

    menuentry 'Shutdown' {
        halt
    }

    menuentry 'Restart' {
        reboot
    }

}

# entry about the thumb drive
menuentry 'About' {
	print_about
	read
}

